{% block heading -%}
{ 
jinja2 generated code
Template Version: {% block version %}{% endblock %}
    swfa_b2:  * remove form
              * start optimization on startup
{% block meta -%}
{% endblock -%}
}
{% endblock -%}

using elsystem; 
using elsystem.windows.forms; 
using elsystem.drawing; 
using elsystem.collections; 
{% block includes %} {% endblock -%}

variables: 
    {% block variables %} {% endblock -%}

    tsopt.Optimizer optimizer(null); 
 
method tsopt.Job DefineJob() 
vars: 
    {% block define_job_vars %} {% endblock %}
    tsopt.Job job;
begin 
	job = new tsopt.Job; 

job
  .SetOptimizationMethod(tsopt.OptimizationMethod.Exhaustive)
  .Securities
    {% block tree_Securities -%}
    {% for sec in setup['data_series'] -%}
    .AddSecurity()
      .SetSymbol("{{sec.symbol}}")
      .Interval
        .SetMinuteChart({{sec.tf}})
      .EndInterval
      .History
        .SetFirstDate("{{ setup.start_dt }}")
        .SetLastDate(" {{ setup.end_dt }}")
      .EndHistory
      .SecurityOptions
        .SetSessionName("{{ setup.session_name }}")
      .EndSecurityOptions
    .EndSecurity
    {% endfor -%}
  .EndSecurities
  {% endblock -%}
  .Strategies
    {%- block tree_Strategies %}
    .AddStrategy("{{ setup.strategy_name }}")
      {%- block AddStrategy %}
      .ELInputs
        {% for name in setup['opt_inputs'].keys() -%}
        {% set dict = setup['opt_inputs'][name] -%}
        {% if dict.type == 'range' -%}
        {% set params = dict.params.split(',') -%}
        .OptRange("{{ name }}", {{ params[0] }}, {{ params[1] }}, {{ params[2] }})
        {% endif -%}
        {%- if dict.type == 'list' -%}
        .OptList("{{ name }}")
            {%- for v in dict.value %}
            .AddValue({{ v }}) 
            {%- endfor %}
        .EndOptList
        {% endif -%}
        {% if dict.type == 'var' -%}
        .SetInput("{{ name }}", {{ dict.value[0] }})
        {% endif -%}
        {% endfor -%}
      .EndELInputs
      {% endblock -%}
    .EndStrategy
    {% endblock -%}
  .EndStrategies
  .Settings
    .OutSample
      .SetLastPercent({{setup.oosPercentLast}})
    .EndOutSample
    .GeneralOptions
        .SetMaxBarsBack({{setup.max_bars_back}})
        .SetLookInsideBarEnabled( True )
        .SetLookInsideBarResQty( 15 )
        .SetLookInsideBarResUnit( tsopt.Compression.Minute )
    .EndGeneralOptions
    .TradeSize
      .SetFixedShares(1)
    .EndTradeSize
    .PositionOptions
      .SetMaxSharesPerPosition(65000)
    .EndPositionOptions
    .ResultOptions
      .SetFitnessMetric(tsopt.MetricID.TSIndex)
      .SetKeepType(tsopt.KeepType.Highest)
      .SetNumTestsToKeep(8000)
    .EndResultOptions
    .WalkForward
        .SetEnabled( True )
        .SetTestName( "{{setup.walk_forward_file}}" )
    .EndWalkForward


  .EndSettings
.UseDefinition(); 

return(job);
end; 
 
method void StartOptimization() 
vars: 
    tsopt.Job job; 
begin 
    ClearPrintLog; 
    Print("Starting optimization..."); 
    job = DefineJob();   
    job.WriteXML("c:\job.xml");
    Print("Opt Settings: ", job.ToString());
    optimizer = new tsopt.Optimizer; 
    optimizer.JobDone += OptDone; 
    optimizer.JobFailed += OptError; 
    optimizer.ProgressChanged += OptProgress; 
    optimizer.StartJob(job); 
end; 
 
method void OptProgress(Object sender, tsopt.ProgressChangedEventArgs args) 
vars: 
    int pct; 
begin 
    // Calculate current progress bar percentage 
    if args.Progress.TestCount <> 0 then 
        pct = Round((args.Progress.TestNum / args.Progress.TestCount) * 100, 0) astype int;	 
 
    Print("Test ", args.Progress.TestNum.ToString(), " of ",
          args.Progress.TestCount.ToString(), "  ", "Progress ", pct.ToString(), "%  ", 
          args.BestValues.FitnessName, " = ", args.BestValues.FitnessValue.ToString()); 
end; 
 
method void OptDone( object sender, tsopt.JobDoneEventArgs args )
vars:
    tsopt.Results results,
    Vector vec,
    string temp,
    string name,
    int p,
    Int k,
    elsystem.io.StreamWriter file;
begin
    //PBar.Value = 100; // Set progress bar to 100% 
    Print("Optimization done"); 
    Print( "Net Profit = ", args.Results.NetProfit(), " results.TestCount = ", args.results.TestCount:0:0 );
    results = args.Results;
    For k = 0 to results.OptParamCount - 1 begin
        print( "Param ", k:0:0, " is ", results.GetOptParamHeading( k ) );
    end;

    file = elsystem.io.StreamWriter.Create("{{setup.swfa_done_fn}}");
    file.Write("Test");

end;

method void OptError(Object sender, tsopt.JobFailedEventArgs args) 
begin 
    //PBar.Value = 100; // Set progress bar to 100% 
    Print("Optimization Error: ", args.Error.Message); 
end; 
 
once 
begin 
    StartOptimization(); 
end; 
